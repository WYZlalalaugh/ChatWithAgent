version: '3.8'

services:
  # MySQL数据库
  mysql:
    image: mysql:8.0
    container_name: chatagent-mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-chatagent123}
      MYSQL_DATABASE: ${MYSQL_DATABASE:-chatagent}
      MYSQL_USER: ${MYSQL_USER:-chatagent}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD:-chatagent123}
    ports:
      - "${MYSQL_PORT:-3306}:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./scripts/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - chatagent-network
    command: --default-authentication-plugin=mysql_native_password --innodb-buffer-pool-size=256M
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10

  # Redis缓存
  redis:
    image: redis:7-alpine
    container_name: chatagent-redis
    restart: unless-stopped
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf
    networks:
      - chatagent-network
    command: redis-server /usr/local/etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 后端API服务
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: chatagent-backend
    restart: unless-stopped
    environment:
      # 数据库配置
      DATABASE_URL: mysql+asyncmy://${MYSQL_USER:-chatagent}:${MYSQL_PASSWORD:-chatagent123}@mysql:3306/${MYSQL_DATABASE:-chatagent}
      REDIS_URL: redis://redis:6379/0
      
      # 应用配置
      APP_ENV: ${APP_ENV:-production}
      DEBUG: ${DEBUG:-false}
      SECRET_KEY: ${SECRET_KEY:-your-secret-key-here}
      JWT_SECRET: ${JWT_SECRET:-your-jwt-secret-here}
      
      # OpenAI配置
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      OPENAI_BASE_URL: ${OPENAI_BASE_URL:-https://api.openai.com/v1}
      
      # 其他LLM配置
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}
      GOOGLE_API_KEY: ${GOOGLE_API_KEY}
      
      # 存储配置
      UPLOAD_PATH: /app/uploads
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
    ports:
      - "${BACKEND_PORT:-8000}:8000"
    volumes:
      - uploads_data:/app/uploads
      - logs_data:/app/logs
    networks:
      - chatagent-network
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # 前端Web服务
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: chatagent-frontend
    restart: unless-stopped
    ports:
      - "${FRONTEND_PORT:-80}:80"
    networks:
      - chatagent-network
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx负载均衡器（可选）
  nginx:
    image: nginx:alpine
    container_name: chatagent-nginx
    restart: unless-stopped
    ports:
      - "${NGINX_PORT:-8080}:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    networks:
      - chatagent-network
    depends_on:
      - frontend
      - backend
    profiles:
      - nginx

  # 向量数据库 - Chroma
  chroma:
    image: chromadb/chroma:latest
    container_name: chatagent-chroma
    restart: unless-stopped
    environment:
      CHROMA_SERVER_HOST: 0.0.0.0
      CHROMA_SERVER_HTTP_PORT: 8001
    ports:
      - "${CHROMA_PORT:-8001}:8001"
    volumes:
      - chroma_data:/chroma/chroma
    networks:
      - chatagent-network
    profiles:
      - vector-db

  # 监控 - Prometheus（可选）
  prometheus:
    image: prom/prometheus:latest
    container_name: chatagent-prometheus
    restart: unless-stopped
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - chatagent-network
    profiles:
      - monitoring

  # 监控 - Grafana（可选）
  grafana:
    image: grafana/grafana:latest
    container_name: chatagent-grafana
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - chatagent-network
    depends_on:
      - prometheus
    profiles:
      - monitoring

networks:
  chatagent-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  mysql_data:
    driver: local
  redis_data:
    driver: local
  uploads_data:
    driver: local
  logs_data:
    driver: local
  chroma_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local